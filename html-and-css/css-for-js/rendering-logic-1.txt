-> We don't start with a blank canvas, HTML tags do include a few minimal styles. These styles are part of the user-agent stylesheet ("built-in" styles). Each browser includes their own stylesheet full of base styles.

-> certain CSS properties inherit. Most of the properties that inherit are typography-related.
https://www.sitepoint.com/css-inheritance-introduction/#list-css-properties-inherit

-> we may wish to have a property inherit even when it wouldn't normally do so. e.g. link colors. Even though color is an inheritable property, it's being overwritten by the default style. We can fix this by explicitly telling anchor tags to inherit their containing text color. color: inherit;

#########################################################################

-> The cascade algorithm.
-> When the browser needs to disply an element on the screen, it first needs to figure out which declarations apply to it. And b4 it can do that, it needs to collect a set of matching rules. Once it has a list of applicable rules, it works out any conflicts and whittles it down to a list of specific declarations that are applicable. The specificity of the selector will determine which rule win the battle.
-> CSS language includes many different selectors, and each selector has a relative power.
-> How can we implement the cascade in JS, spread syntax. Treat each rule as an object, and an final object called appliedStyles in which we use the spread operator to unpack the related styles. The order thst they're merged in is determined by specificity.
-> https://2019.wattenberger.com/blog/css-cascade

#########################################################################

-> CSS has block direction (vertical) and an inline direction (horizontal)
-> https://24ways.org/2016/css-writing-modes/
-> Logical Properties: margin-block-start (margin-top), margin-block-end (margin-bottom), margin-inline-start (margin-left), margin-inline-end (margin-right). Why these alternatives? Not all languages are left-to-right, top-to-bottom.

#########################################################################

-> The Box Model: Content, Padding, Border, Margin 
-> The box-sizing CSS property allows us to change the rules for size calculations. The default value (content-box) only takes the inner content into account, but it offers an alternative value, border-box.
-> We can comment a declaration in CSS and toggle it on and off in the devtools, useful for experimentation.

*,
*::before,
*::after{
    box-sizing: border-box;
}

-> * will select all elements, but ::before and ::after aren't considered elements.

-> When applying padding, we can pick from a pretty wide range of units. The most common ones are: px, em, rem
-> px are the best unit to use for padding, padding stays consistent and text size is the only thing that scales. As long as the text is big enough and as long as there is sufficient distance b/w the text, other than that we don't need to scale, if we do, we can use the browser zoom.
-> we can use percentages for padding. percentages are always calculated based on the element's available width. This is true for left/right padding, and even for top/bottom padding.
-> padding: top/bottom left/right  OR top right bottom left;
-> when fewer than 4 values are passed, it "fills in the gaps"
-> "long-form" properties can overwrite the relevant value in shorthand properties. The order matters! The overwrite has to come after the shorthand, otherwise it won't have any effect.


-> broder: border-width border-style border-color
-> the only required field is border-style.
-> there are a wide variety of border styles
-> if we don't specify a border color, it'll default to using the element's text color.

<style>
.box{

}

.box.one{

}
.box.two{

}
.box.three{

}

</style>

<div class="box one"></div>
<div class="box two"></div>
<div class="box three"></div>

-> "currentColor" keyword, is always a reference to the element's derived text color, and it can be used anywhere a color might be used.
-> https://wiki.csswg.org/ideas/mistakes
-> border-radius property focused on specific corners.
->border-top-left-radius, border-top-right-radius, border-bottom-right-radius, border-bottom-left-radius
-> we can also use percentages.

-> outline doesn't affect layout. oultine is kinda more like box-shadow; it's a cosmetic effect draped over an element, without nudging it around, or changing its size. outline, outline-width, outline-style, outline-color. outlines are stacked outside border. outlines will follow the curve set with border-radius. outlines have a special outline-offset property.
-> outlines are sometimes used as focus indicators, for ppl who use non-pointer devices, we shoud avoid tweaking outlines on interactive elements like buttons or links.


-> margin increases the space around an element.
-> with padding and border, only positive numbers (including 0) are supported. with margin we can drop into the negatives. A negative margin can pull an element outside its parent. It can also pull an element's sibling closer. DON'T think that margin is about changing the selected element's position, it's about changing the gap b/w elements. Negative margin can affect the position of all siblings. When we use margin to tweak an element's position we might also be tweaking every subsequent element as well
-> https://www.quirksmode.org/blog/archives/2020/02/negative_margin.html
-> margins can be used to center a child in a container. When the left and right margins are set to auto. Auto value seeks to fill the maximum available space. Only works for horizontal margins. setting top/bottom margin to auto is equivalent to setting it to 0px atleast in default layout. This only works on elements with an explicit width.


<style>
  body {
    background: #222;
    padding: 32px;
  }

  .card {
    background-color: white;
    /* padding: 32px; */
    padding: 32px;
    border-radius: 8px;
  }

  img {
    display: block;
    width: 100%;

  }

  p, img {
    margin-bottom: 16px;
  }

  .img-holder{
    margin-left:-32px;
    margin-right: -32px;
  }
  
  /* p{
    padding: 32px;
  } */
</style>

<div class="card">
  <p>
    Otters have long, slim bodies and relatively short limbs. Their most striking anatomical features are the powerful webbed feet used to swim, and their seal-like abilities holding breath underwater.
  </p>
  <div class="img-holder">
  <img alt="A cute otter in water" src="https://courses.joshwcomeau.com/cfj-mats/otter.jpg" />
  </div>
  <p>
    More importantly, otters are glorious water dogs, playful and curious. The otter, no other, is the best animal.
  </p>
</div>


|                           |
|     bla bla text text     |
|     more text and bla     |
+---------------------------+
|IMAGE IMAGE IMAGE IMAGE IMA|
|GE IMAGE IMAGE IMAGE IMAGE |
|IMAGE IMAGE IMAGE IMAGE IMA|
+---------------------------+
|     and the text goes     |
|     on and on and on.     |
|                           |

-> In the above layout, the img-holder div will do the stretching and the imaage will just fill the container.

-> the default value for the width property is auto. For most elements this means automatically grow to fill as much space as possible. Images are "replaced elements" they dont automatically expand to fill the avail space. Instead they rely on their intrinsic size. In case of replace elements it means use your natural width.

#########################################################################

-> Every HTML element will have its layout calculated by a layout algorithm. These are known as layout modes. Flow layout is the default mode.

-> A replaced element is one that embeds a "foreign" object. This includes: <img/>, <video/>, <canvas/>. These elements are all technically inline, but they're special: they can affect block layout. You can give them explicit dimensions, or add some margin-top. Think of it as a foreign object within an inline wrapper. When we pass it a width or height, we are applying those properties to the foreign object. The inline wrapper still goes with the flow.

-> width: fit-content;
-> elements that are display: block; will stack in the block direction, regardless of their size.

-> inline elements have "magic space", the browser treats inline elements as if they're typography. it makes sense that with text, you'd want a bit of extra space, so that the lines in a paragraph aren't crammed in too tightly.
-> solution: set images to display: block; OR set the line-height:0; on the wrapping div.

-> space b/w inline elements. This spqace is caused by the whitespace b/w elements. if we squish our HTML so that there are no newlines or whitespace characters b/w images, the problem goes away. This happens b/c HTML is space-sensitive, at least to an extent. The browser can't tell the difference b/w whitespace added to separate words in a paragraph, and whitespace added to indent our HTML and keep it redable. This issue is specific to flow layout. Other layout modes ignore whitespace altogether.

-> inline elements can line-wrap. Inline elements can produce shapes other than boxes. it's worth noting that it's still considered "one-shape". Block-level elements may appear as different shapes but as far as layout and positioning is concerned block-level elements are always rectangles. 

-> An inline-block element is a block-level element that can be placed in an inline context. In terms of layout, it's treated as an inline elment. But internally, it acts much more like a block element.

-> Inline-block doesn't wrap. Descriptive link text is important for accessibility.
-> https://www.a11yproject.com/posts/creating-valid-and-accessible-links/

#########################################################################

-> When we use percentage-based widths, those percentages are based on the parent element's content space. The element will occupy 100% of the parent element's content space regardless of any other circumstances. This calculation happens first, b4 the margin is applied.

-> Block elements have a default width value of auto, not 100%. width: auto it's a hungry value that will grow as much as it's able to, but no more. By default, block elements have dynamic sizing. They're context-aware.

-> there are two kinds of values we can specify for width: measurements, keywords.

1. min-content: We want our element to become as narrow as possible, based on the child elements. We aren't sizing based on the space made available by the parent, we are sizing based on the element's children. This is known as a intrinsic value. We are focusing on the element itself. Whenever it encounters whitespace or a hyphenated word, it will break into a new line.

2. max-content: It never adds any line-breaks. Pays no attention to the constraints set by the parent. It will size the element based purely on the length of its unbroken children. Useful when we want to add background color only around the letters.

3. fit-content: If the width can fit within the parent container, it behaves just like max-content, not adding any line-breaks. If the content is too wide to fit in the parent, it adds line-breaks as-needed to ensure it never exceeds the available space. It behaves like width: auto.

-> we can add constraints to an elements size using min-width and max-width, these allow us to mix units. We can set constraints in px, but set percentage width.

-> display: table EXPLORE IF REQUIRED.
-> width: fit-content ---------> max-width: max-content AND min-width: min-content, width property remains at auto.

-> <figure> element allows us to display any sort of non-typical content: images, videos, code snippets, widgets. It also allows us to caption that content with <figcaption>

#########################################################################

-> The default height behaviour is to be as small as possible while fitting all of the element's content.

-> let's say that we have an element that wraps around our entire app. If a specific page doesn't have much content, the entire app might be less than 100% of our window height. What if we want it to take at least 100% of the available height?
We need a .wrapper element that will be no smaller than 100% of the available height.

Solution:
  -> put height: 100% on every element b4 your main one (including html and body).
  -> put min-height: 100% on that wrapper 
  -> avoid using percentage based heights within that wrapper

-> We need to include selectors for every element that sits between the root html tag, and the element we want to stretch to 100% of the screen size.

-> An element's width is calculated based on its parent's size, but an element's height is calculated based on its children.

-> If you set height: 100vh, your element will inherit its height from the viewport size. When you scroll on a mobile device, the address bar and footer controls slide away, yielding their space to the content. This means that scrolling on a mobile device changes the viewport height. When the page first loads, 100vh will actually be quite a bit taller than the viewable area. 

Solution: 
.element {
  height: 100vh; /* Fallback for older browsers */
  height: 100svh; // Small Viewport Height
}

vh, svh, dvh, lvh

#########################################################################

-> Adjacent margins will sometimes collapse and overlap

-> Only vertical margin colpase, to be more precise, only block-direction margins collapse. Horizontal margins don't collapse in left-to-right languages.
-> CSS gives us the power to switch our writing modes, so that block-level elements stack horizontally instead of vertically.

-> Margins only collapse in flow layout
-> Only adjacent elements collapse. Using </br> to increase space b/w block-lvl elements can have adverse effects on margins.

-> The bigger margin wins.
-> Nesting doesn't prevent collapsing. Margin is meant to increase distance b/w siblings. It is not meant to increase the gap b/w a child and its parent's bounding box; that's what padding is for. Margin will always try and increase distance b/w siblings, even if it means transferring margin to the parent element. Margins only collapse when they are touching. Padding and border act as a wall for collapsing margins.

-> Empty space b/w two margins stops them from collapsing. e.g explicitly setting height to parent element.
-> Margin collapsing is a per-side basis analysis.

-> If the parent element creates a scroll container, it will disable margin collapse if the margins are on either side of the scroll container.

-> Margins can collapse in same direction.
-> Opx margin is still a collapsable margin.

-> More than two margins can collapse

-> A negative margin will pull an element in the opposite direction. The negative margins will share a space, and the size of that space is determined by the most negative margin.
-> Negative and Positive margins? The number are added together.

-> Multiple positive and negative margins? All +ve margins collapse together, All -ve margins collapse together, Add the two numbers together.

-> https://mxstbr.com/thoughts/margin

-> Margin is like putting glue on something before you’ve decided what to stick it to, or if it should be stuck to anything.

-> A growing trend amongst JavaScript developers is to forego margin altogether, and use a combination of padding and layout components instead.

-> For reusable components, we want them to be as unopinionated as possible.

-> Layout components; Basic idea is that components aren't allowed to have "external margin", margin that extends past the edge of the border box. Instead, components are grouped using layout components like Stack.

-> https://courses.joshwcomeau.com/css-for-js/guides/installing-node-and-react